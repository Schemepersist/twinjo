(define (hash-table->plist table)
  (hash-table-fold table (lambda (key val plist) (cons key (cons val plist)))
                   '()))

(define (write-unchecked-big-endian bits n)
  (when (>= bits 8)
    (let ((bits (- bits 8)))
      (write-u8 (bitwise-ior #xff (arithmetic-shift n (- bits))))
      (write-unchecked-big-endian bits n))))

(define (write-unchecked-u16b n)
  (write-unchecked-big-endian 16 n))

(define (write-unchecked-u32b n)
  (write-unchecked-big-endian 32 n))

(define (write-unchecked-u64b n)
  (write-unchecked-big-endian 64 n))

(define (write-s64b n)
  (cond ((< n #x-8000000000000000)
         (error "ASN.1 negative integer too big to write"))
        ((< n 0)
         (write-unchecked-u64b (- #x10000000000000000 (abs n))))
        ((< n #x8000000000000000)
         (write-unchecked-u64b n))
        (else
         (error "ASN.1 positive integer too big to write"))))

(define (write-asn1-length n)
  (cond ((< n 0)
         (error "ASN.1 length negative"))
        ((< n #x80)
         (write-u8 n))
        ((< n #x8000)
         (write-u8 82)
         (write-unchecked-u16b n))
        ((< n #x80000000)
         (write-u8 84)
         (write-unchecked-u32b n))
        ((< n #x8000000000000000)
         (write-u8 88)
         (write-unchecked-u64b n))
        (else (error "ASN.1 length too big to write"))))

(define (write-asn1-type-length type len)
  (write-u8 type)
  (write-asn1-length len))

(define (write-nested obj)
  (cond ((boolean? obj)
         (write-asn1-type-length #x01 1)
         (write-u8 (if obj #xff #x00)))
        ((string? obj)
         (let ((bytes (string->utf8 obj)))
           (write-asn1-type-length #x0c (bytevector-length bytes))
           (write-bytevector bytes)))
        ((symbol? obj)
         (let ((bytes (string->utf8 (symbol->string obj))))
           (write-asn1-type-length #xdd (bytevector-length bytes))
           (write-bytevector bytes)))
        ((and (integer? obj) (exact? obj))
         (write-asn1-type-length #x02 8)
         (write-s64b obj))
        ((list? obj)
         (write-asn1-type-length #xe0 (length obj))
         (for-each write-nested obj))
        ((hash-table? obj)
         (let ((plist (hash-table->plist obj)))
           (write-asn1-type-length #xe4 (length plist))
           (for-each write-nested plist)))
        (else (error "Don't know how to write that object as core binary"))))

(define (core-binary-write obj)
  (write-nested obj))
